def __init__(self, name):
        self.name = name
        self._enrollments = []
=======
class Student:
    def __init__(self, name):
        self.name = name
        self._enrollments = []
        self._grades = {}  # Placeholder for grades, key: Enrollment, value: grade
<<<<<<< SEARCH
    def get_enrollments(self):
        return self._enrollments.copy()
=======
    def get_enrollments(self):
        return self._enrollments.copy()

    def course_count(self):
        """Aggregate method to count the number of courses the student is enrolled in."""
        return len(self._enrollments)

    def aggregate_average_grade(self):
        """Aggregate method to calculate the average grade across all enrollments."""
        if not self._grades:
            return None  # or 0 or raise an exception depending on desired behavior
        total_grades = sum(self._grades.values())
        num_courses = len(self._grades)
        average_grade = total_grades / num_courses
        return average_grade
<<<<<<< SEARCH
class Enrollment:
    all = []

    def __init__(self, student, course):
        if isinstance(student, Student) and isinstance(course, Course):
            self.student = student
            self.course = course
            self._enrollment_date = datetime.now()
            type(self).all.append(self)
        else:
            raise TypeError("Invalid types for student and/or course")

    def get_enrollment_date(self):
        return self._enrollment_date
=======
class Enrollment:
    all = []

    def __init__(self, student, course):
        if isinstance(student, Student) and isinstance(course, Course):
            self.student = student
            self.course = course
            self._enrollment_date = datetime.now()
            type(self).all.append(self)
        else:
            raise TypeError("Invalid types for student and/or course")

    def get_enrollment_date(self):
        return self._enrollment_date

    @classmethod
    def aggregate_enrollments_per_day(cls):
        """Aggregate method to count enrollments per day."""
        enrollment_count = {}
        for enrollment in cls.all:
            date = enrollment.get_enrollment_date().date()
            enrollment_count[date] = enrollment_count.get(date, 0) + 1
        return enrollment_count
